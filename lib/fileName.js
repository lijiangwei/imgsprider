/********************************************************************
 **
 **比较通用的正则表达式，捕获url各个部分。
 **注意各部分基本上都包含了相应的符号，例如端口号如果捕获成功，那就是':80'
 **函数返回一个正则表达式捕获数组。
 **注意，现在获得的是一个数组，所以需要通过arr[i]的方式引用。
 **正则表达式所有的匹配说明::.........
 **$0
 **整个url本身。如果$0==null，那就是我的正则有意外，未捕获的可能。
 **有一种未捕获的情况已经被发现，那就是域名后面没有以'/'结尾，如：'http://localhost'
 **但是经过我的测试，IE和firefox会自动把域名后面加上'/'的。
 **$1-$4  协议，域名，端口号，还有最重要的路径path！
 **$5-$7  文件名，锚点(#top)，query参数(?id=55)
 **
 *********************************************************************/

function UrlRegEx(url) {
	//如果加上/g参数，那么只返回$0匹配。也就是说arr.length = 0
	var re = /(/w+):////([^/:|//]+)(/:/d*)?(.*//)([^#|/?|/n]+)?(#.*)?(/?.*)?/i;
	var arr = url.match(re);
	return arr;

}

exports.getFileName = UrlRegEx;

